-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiplier_multiplier_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    localA_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_ce0 : OUT STD_LOGIC;
    localA_we0 : OUT STD_LOGIC;
    localA_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localA_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_1_ce0 : OUT STD_LOGIC;
    localA_1_we0 : OUT STD_LOGIC;
    localA_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localA_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_2_ce0 : OUT STD_LOGIC;
    localA_2_we0 : OUT STD_LOGIC;
    localA_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localA_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_3_ce0 : OUT STD_LOGIC;
    localA_3_we0 : OUT STD_LOGIC;
    localA_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localA_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_4_ce0 : OUT STD_LOGIC;
    localA_4_we0 : OUT STD_LOGIC;
    localA_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localA_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_5_ce0 : OUT STD_LOGIC;
    localA_5_we0 : OUT STD_LOGIC;
    localA_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localA_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_6_ce0 : OUT STD_LOGIC;
    localA_6_we0 : OUT STD_LOGIC;
    localA_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localA_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    localA_7_ce0 : OUT STD_LOGIC;
    localA_7_we0 : OUT STD_LOGIC;
    localA_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of multiplier_multiplier_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal exitcond111475_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_cast293_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_58 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_112_fu_188_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast1_fu_210_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_113_fu_194_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component multiplier_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component multiplier_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((exitcond111475_fu_182_p2 = ap_const_lv1_0)) then 
                    empty_fu_58 <= empty_112_fu_188_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_58 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_CS_fsm_state1, empty_fu_58, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_58;
        end if; 
    end process;

    empty_112_fu_188_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_p_load) + unsigned(ap_const_lv7_1));
    empty_113_fu_194_p1 <= ap_sig_allocacmp_p_load(3 - 1 downto 0);
    exitcond111475_fu_182_p2 <= "1" when (ap_sig_allocacmp_p_load = ap_const_lv7_40) else "0";
    localA_1_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_1_ce0 <= ap_const_logic_1;
        else 
            localA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_1_d0 <= ap_const_lv32_0;

    localA_1_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_1))) then 
            localA_1_we0 <= ap_const_logic_1;
        else 
            localA_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_2_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_2_ce0 <= ap_const_logic_1;
        else 
            localA_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_2_d0 <= ap_const_lv32_0;

    localA_2_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_2))) then 
            localA_2_we0 <= ap_const_logic_1;
        else 
            localA_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_3_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_3_ce0 <= ap_const_logic_1;
        else 
            localA_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_3_d0 <= ap_const_lv32_0;

    localA_3_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_3))) then 
            localA_3_we0 <= ap_const_logic_1;
        else 
            localA_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_4_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_4_ce0 <= ap_const_logic_1;
        else 
            localA_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_4_d0 <= ap_const_lv32_0;

    localA_4_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_4))) then 
            localA_4_we0 <= ap_const_logic_1;
        else 
            localA_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_5_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_5_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_5_ce0 <= ap_const_logic_1;
        else 
            localA_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_5_d0 <= ap_const_lv32_0;

    localA_5_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_5))) then 
            localA_5_we0 <= ap_const_logic_1;
        else 
            localA_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_6_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_6_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_6_ce0 <= ap_const_logic_1;
        else 
            localA_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_6_d0 <= ap_const_lv32_0;

    localA_6_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_6))) then 
            localA_6_we0 <= ap_const_logic_1;
        else 
            localA_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_7_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_7_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_7_ce0 <= ap_const_logic_1;
        else 
            localA_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_7_d0 <= ap_const_lv32_0;

    localA_7_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_7))) then 
            localA_7_we0 <= ap_const_logic_1;
        else 
            localA_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_address0 <= p_cast293_fu_198_p1(3 - 1 downto 0);

    localA_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            localA_ce0 <= ap_const_logic_1;
        else 
            localA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localA_d0 <= ap_const_lv32_0;

    localA_we0_assign_proc : process(ap_CS_fsm_state1, exitcond111475_fu_182_p2, p_cast1_fu_210_p4, ap_start_int)
    begin
        if (((exitcond111475_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1) and (p_cast1_fu_210_p4 = ap_const_lv3_0))) then 
            localA_we0 <= ap_const_logic_1;
        else 
            localA_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast1_fu_210_p4 <= ap_sig_allocacmp_p_load(5 downto 3);
    p_cast293_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_113_fu_194_p1),64));
end behav;
