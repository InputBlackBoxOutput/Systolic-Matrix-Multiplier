-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiplier_multiplier_Pipeline_VITIS_LOOP_142_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln142 : IN STD_LOGIC_VECTOR (57 downto 0);
    sysarrayC_320_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_328_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_336_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_344_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_352_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_360_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_368_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_376_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_321_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_329_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_337_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_345_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_353_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_361_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_369_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_377_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_322_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_330_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_338_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_346_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_354_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_362_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_370_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_378_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_323_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_331_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_339_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_347_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_355_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_363_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_371_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_379_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_324_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_332_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_340_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_348_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_356_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_364_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_372_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_380_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_325_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_333_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_341_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_349_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_357_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_365_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_373_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_381_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_326_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_334_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_342_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_350_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_358_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_366_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_374_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_382_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_327_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_335_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_343_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_351_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_359_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_367_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_375_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sysarrayC_383_reload : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of multiplier_multiplier_Pipeline_VITIS_LOOP_142_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal empty_98_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln142_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem3_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_98_fu_629_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_637_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_659_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_681_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_703_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_725_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_747_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_769_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_791_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln144_fu_188 : STD_LOGIC_VECTOR (255 downto 0);
    signal select_ln142_fu_848_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_fu_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_fu_623_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln147_fu_633_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln144_6_fu_821_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component multiplier_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component multiplier_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_83_32_1_1_U686 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_320_reload,
        din1 => sysarrayC_328_reload,
        din2 => sysarrayC_336_reload,
        din3 => sysarrayC_344_reload,
        din4 => sysarrayC_352_reload,
        din5 => sysarrayC_360_reload,
        din6 => sysarrayC_368_reload,
        din7 => sysarrayC_376_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_fu_637_p10);

    mux_83_32_1_1_U687 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_321_reload,
        din1 => sysarrayC_329_reload,
        din2 => sysarrayC_337_reload,
        din3 => sysarrayC_345_reload,
        din4 => sysarrayC_353_reload,
        din5 => sysarrayC_361_reload,
        din6 => sysarrayC_369_reload,
        din7 => sysarrayC_377_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_1_fu_659_p10);

    mux_83_32_1_1_U688 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_322_reload,
        din1 => sysarrayC_330_reload,
        din2 => sysarrayC_338_reload,
        din3 => sysarrayC_346_reload,
        din4 => sysarrayC_354_reload,
        din5 => sysarrayC_362_reload,
        din6 => sysarrayC_370_reload,
        din7 => sysarrayC_378_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_2_fu_681_p10);

    mux_83_32_1_1_U689 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_323_reload,
        din1 => sysarrayC_331_reload,
        din2 => sysarrayC_339_reload,
        din3 => sysarrayC_347_reload,
        din4 => sysarrayC_355_reload,
        din5 => sysarrayC_363_reload,
        din6 => sysarrayC_371_reload,
        din7 => sysarrayC_379_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_3_fu_703_p10);

    mux_83_32_1_1_U690 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_324_reload,
        din1 => sysarrayC_332_reload,
        din2 => sysarrayC_340_reload,
        din3 => sysarrayC_348_reload,
        din4 => sysarrayC_356_reload,
        din5 => sysarrayC_364_reload,
        din6 => sysarrayC_372_reload,
        din7 => sysarrayC_380_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_4_fu_725_p10);

    mux_83_32_1_1_U691 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_325_reload,
        din1 => sysarrayC_333_reload,
        din2 => sysarrayC_341_reload,
        din3 => sysarrayC_349_reload,
        din4 => sysarrayC_357_reload,
        din5 => sysarrayC_365_reload,
        din6 => sysarrayC_373_reload,
        din7 => sysarrayC_381_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_5_fu_747_p10);

    mux_83_32_1_1_U692 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_326_reload,
        din1 => sysarrayC_334_reload,
        din2 => sysarrayC_342_reload,
        din3 => sysarrayC_350_reload,
        din4 => sysarrayC_358_reload,
        din5 => sysarrayC_366_reload,
        din6 => sysarrayC_374_reload,
        din7 => sysarrayC_382_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_6_fu_769_p10);

    mux_83_32_1_1_U693 : component multiplier_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => sysarrayC_327_reload,
        din1 => sysarrayC_335_reload,
        din2 => sysarrayC_343_reload,
        din3 => sysarrayC_351_reload,
        din4 => sysarrayC_359_reload,
        din5 => sysarrayC_367_reload,
        din6 => sysarrayC_375_reload,
        din7 => sysarrayC_383_reload,
        din8 => trunc_ln147_fu_633_p1,
        dout => tmp_7_fu_791_p10);

    flow_control_loop_pipe_sequential_init_U : component multiplier_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln142_fu_617_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_192 <= add_ln142_fu_623_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_192 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln144_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln144_fu_188 <= ap_const_lv256_lc_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_ln144_fu_188 <= select_ln142_fu_848_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_617_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_98_reg_882 <= empty_98_fu_629_p1;
                tmp_1_reg_893 <= tmp_1_fu_659_p10;
                tmp_2_reg_899 <= tmp_2_fu_681_p10;
                tmp_3_reg_905 <= tmp_3_fu_703_p10;
                tmp_4_reg_911 <= tmp_4_fu_725_p10;
                tmp_5_reg_917 <= tmp_5_fu_747_p10;
                tmp_6_reg_923 <= tmp_6_fu_769_p10;
                tmp_7_reg_929 <= tmp_7_fu_791_p10;
                tmp_reg_887 <= tmp_fu_637_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln142_fu_623_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem3_WREADY, empty_98_reg_882)
    begin
                ap_block_state2_io <= ((empty_98_reg_882 = ap_const_lv1_1) and (m_axi_gmem3_WREADY = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln142_fu_617_p2)
    begin
        if (((icmp_ln142_fu_617_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_192)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_192;
        end if; 
    end process;

    empty_98_fu_629_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);

    gmem3_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem3_WREADY, empty_98_reg_882, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_98_reg_882 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem3_blk_n_W <= m_axi_gmem3_WREADY;
        else 
            gmem3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln142_fu_617_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_8) else "0";
    m_axi_gmem3_ARADDR <= ap_const_lv64_0;
    m_axi_gmem3_ARBURST <= ap_const_lv2_0;
    m_axi_gmem3_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem3_ARID <= ap_const_lv1_0;
    m_axi_gmem3_ARLEN <= ap_const_lv32_0;
    m_axi_gmem3_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem3_ARPROT <= ap_const_lv3_0;
    m_axi_gmem3_ARQOS <= ap_const_lv4_0;
    m_axi_gmem3_ARREGION <= ap_const_lv4_0;
    m_axi_gmem3_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem3_ARUSER <= ap_const_lv1_0;
    m_axi_gmem3_ARVALID <= ap_const_logic_0;
    m_axi_gmem3_AWADDR <= ap_const_lv64_0;
    m_axi_gmem3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem3_AWID <= ap_const_lv1_0;
    m_axi_gmem3_AWLEN <= ap_const_lv32_0;
    m_axi_gmem3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem3_AWUSER <= ap_const_lv1_0;
    m_axi_gmem3_AWVALID <= ap_const_logic_0;
    m_axi_gmem3_BREADY <= ap_const_logic_0;
    m_axi_gmem3_RREADY <= ap_const_logic_0;
    m_axi_gmem3_WDATA <= ((((((((tmp_7_reg_929 & tmp_6_reg_923) & tmp_5_reg_917) & tmp_4_reg_911) & tmp_3_reg_905) & tmp_2_reg_899) & tmp_1_reg_893) & tmp_reg_887) & phi_ln144_fu_188);
    m_axi_gmem3_WID <= ap_const_lv1_0;
    m_axi_gmem3_WLAST <= ap_const_logic_0;
    m_axi_gmem3_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem3_WUSER <= ap_const_lv1_0;

    m_axi_gmem3_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_98_reg_882, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_98_reg_882 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem3_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem3_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln144_6_fu_821_p9 <= (((((((tmp_7_reg_929 & tmp_6_reg_923) & tmp_5_reg_917) & tmp_4_reg_911) & tmp_3_reg_905) & tmp_2_reg_899) & tmp_1_reg_893) & tmp_reg_887);
    select_ln142_fu_848_p3 <= 
        ap_const_lv256_lc_1 when (empty_98_reg_882(0) = '1') else 
        or_ln144_6_fu_821_p9;
    trunc_ln147_fu_633_p1 <= ap_sig_allocacmp_i(3 - 1 downto 0);
end behav;
